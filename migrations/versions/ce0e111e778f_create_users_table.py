"""create users table

Revision ID: ce0e111e778f
Revises: 
Create Date: 2025-01-12 13:01:40.010553

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy import DDL

# revision identifiers, used by Alembic.
revision: str = 'ce0e111e778f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
                    sa.Column('id', sa.BIGINT(), nullable=False),
                    sa.Column('username', sa.String(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('password', sa.String(), nullable=False),
                    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
                    sa.Column('created_by', sa.BIGINT(), nullable=True),
                    sa.Column('updated_by', sa.BIGINT(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('username')
                    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###

    # ### updated_at trigger ###
    op.execute(DDL(
        """
        CREATE OR REPLACE FUNCTION update_users_updated_at()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = now();
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """
    ))
    op.execute(DDL(
        """
        CREATE TRIGGER users_updated_at_trigger
        BEFORE UPDATE ON users
        FOR EACH ROW
        EXECUTE PROCEDURE update_users_updated_at();
        """
    ))
    # ### end updated_at trigger ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###

    # ### drop updated_at trigger ###
    op.execute(DDL(
        """
        DROP TRIGGER IF EXISTS users_updated_at_trigger ON users;
        """
    ))
    op.execute(DDL(
        """
        DROP FUNCTION IF EXISTS update_users_updated_at();
        """
    ))
    # ### end drop updated_at trigger ###
